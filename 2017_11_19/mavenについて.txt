■mavenの概要
mavenとはProjectObjectModelつまりPOMという考え方に基づきプロジェクトのビルドやテスト・ドキュメンテーション・成果物（ライブラリ）の配備など、プロジェクトのライフサイクル全体を管理するのに使用される。
つまりmavenとは以下のようなことが実行できる。
・必要なライブラリの取得が可能
・ビルド時の設定が可能
・プラグインを使用した設定が可能
よってmavenを使用することで設定のや必要ライブラリを統一することが可能でプロジェクト（チーム）の管理が可能になる。

■メリット・デメリット
・メリット
①設定ファイル(pom.xml)を配布することで全員が同じライブラリを取得することが出来る。つまりライブラリの共有が確実になる
※pom.xmlを同じものにしておけば古いバージョンから取得することや必要なライブラリが足りないなどが防げる
②公開されているライブラリを取得可能(https://mvnrepository.com/)
※ルールにのっとり記載することで公開されているライブラリを取得することが出来る。
④非公開用のリポジトリを作成することで、そこから取得できるので、各々ダウンロードして共有などの手間が省ける
※pom.xmlに記載することで、必要なライブラリをいちいちSVNからチェックアウトしてビルドを通すなどせずに使用できる。
⑤pluginsの設定により全員が共通の設定で開発が行える。
※javaのバージョンを設定するなど
⑥buidを記載することでビルド時の設定を共通にできる。
※javaのバージョンを共通化するなど
⑦細かな設定を簡単に実施できる。
※使用するjavaのバージョンはversion○○など

・デメリット
①pom.xmlの管理が必要
※他チームなどが新規ライブラリを使用した際、pom.xmlを更新しないとエラーが出る

■pom.xmlの書き方
・repositories
一般公開されているリポジトリ(セントラルリポジトリ)とは違い、会社内などで使用するリポジトリを使用する際に記載する。
※具体的には社内のリポジトリに登録しているライブラリを取得する際に記載の必要がある。
【書き方】
<project>
    <repositories>
        <repository>
	<id><識別子（分かるように付ける）/id>
	<name>リポジトリの名前（わかる名前を付ける）</name>
	<url>リポジトリのURL（必須-ここが違うことで正しく取得できなくなる）</url>
        </repository>
    </repositories>
</project>

・dependencies
プロジェクトに依存するライブラリを取得するために記載する(以下のURLに一般的に公開されているライブラリが書かれている)
⇒https://mvnrepository.com/
※必要なライブラリを使用するのに使われる。例えばJunitを使用したい場合はJunitの依存性を解決するために記載するなど

【書き方】
<project>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>3.8.1</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>

※groupId, artifactId, versionは依存するライブラリのものを使用する

・scope
依存するライブラリをいつクラスパスに追加するか指定するもの
※dependencyの子要素として使用することが出来る

【scopeに指定できる内容】
compile　⇒　dependencyのい対してscopeを指定しなかった場合のこと。つまりデフォルト値のこと基本的に記載の意味はなし
provided　⇒　コンパイル時にクラスパスに追加される。
runtime　⇒　testとは違い通常の実行時にもクラスパスに追加される。
test　⇒　test実施時のみクラスパスに追加される。テスト以外の場合に不要なものつまりJunitなどに使用される。
system　⇒　明示的にクラスパスに追加する場合に指定する。glasfishを使用する場合に指定したりする。

・build
<build></buil>で囲むことでプロジェクトのビルド時に<build>タグで囲んだ内容を実行できる。
例：コンパイル時にバージョンをしているするpluginsを指定してビルドは指定したバージョンで行うなど

【書き方】ビルド時バージョン指定する
<build>
    <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
            <source>1.8</source>
            <target>1.8</target>
        </configuration>
</build>

・plugins
ビルドの設定を記載するのに使用される（mavenの公式サイトから必要な設定を調べて記載する）
⇒http://maven.apache.org/plugins/
※使用例はコンパイル時のバージョンを設定するために使用されたりしている。

【書き方】コンパイル時にバージョンを指定する
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
            <source>1.8</source>
            <target>1.8</target>
        </configuration>
</plugin>
